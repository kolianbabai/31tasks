Проход по дереву файлов
1. На вход метода main() подаются два параметра.
Первый - path - путь к директории, второй - resultFileAbsolutePath - имя (полный путь) существующего файла, который будет содержать результат.
2. Переименовать resultFileAbsolutePath в allFilesContent.txt (используй метод FileUtils.renameFile(), и, если понадобится, FileUtils.isExist()).
3. Для каждого файла в директории path и в ее всех вложенных поддиректориях выполнить следующее:
Если у файла длина в байтах НЕ больше 50, то для всех таких файлов:
3.1. Отсортировать их по имени файла в возрастающем порядке, путь не учитывать при сортировке.
3.2. В allFilesContent.txt последовательно записать содержимое всех файлов из п. 3.1. После каждого тела файла записать "\n".
Все файлы имеют расширение txt.
В качестве разделителя пути используй "/".
Для создания файлов используй конструктор File(String pathname).


Требования:
1. Файл, который приходит вторым параметром в main, должен быть переименован в allFilesContent.txt.
2. Нужно создать поток для записи в переименованный файл.
3. Содержимое всех файлов, размер которых не превышает 50 байт, должно быть записано в файл allFilesContent.txt в отсортированном по имени файла порядке.
4. Поток для записи в файл нужно закрыть.
5. Не используй статические переменные.

package com.javarush.task.task31.task3101;


import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Queue;

/*
Проход по дереву файлов
*/
public class Solution {
    public static void main(String[] args) throws IOException {

        File folder = new File(args[0]);
        File source = new File(args[1]);
        File destination = new File(source.getParent() + "/allFilesContent.txt");

        FileUtils.renameFile(source, destination);

        PriorityQueue<File> fileNamesQueue = new PriorityQueue<>();
        PriorityQueue<File> fileNamesQueueResult = new PriorityQueue<>();
        ArrayList<String> namesFileFinal = new ArrayList<>();


        queueWithFiles(fileNamesQueue, fileNamesQueueResult, folder);

        for(File filesInDir : fileNamesQueueResult){
            if(filesInDir.length() <= 50){
                namesFileFinal.add(filesInDir.getAbsolutePath());
            }
        }

        FileOutputStream outputStream = new FileOutputStream(destination);
        InputStream inputStream = null;
        for(String s : namesFileFinal){
                inputStream = new FileInputStream(s);

                while (inputStream.available() > 0){
                    outputStream.write(inputStream.read());
                }
                outputStream.write(("\n").getBytes());

            inputStream.close();
        }
        outputStream.close();

    }

    private static Queue<File> queueWithFiles(Queue <File> filesQueue, Queue <File> filesResult, File path){

        Collections.addAll(filesQueue, path.listFiles());

        while (!filesQueue.isEmpty()){

            File currentFile = filesQueue.remove();

            if (!currentFile.isDirectory()) {
                filesResult.add(currentFile);
            } else {
                queueWithFiles(filesQueue, filesResult, currentFile);
            }

        }

        return filesQueue;
    }
}


package com.javarush.task.task31.task3101;

import java.io.File;

public class FileUtils {

    public static void deleteFile(File file) {
        if (!file.delete()) System.out.println("Can not delete file with name " + file.getName());
    }

    public static void renameFile(File source, File destination) {
        if (!source.renameTo(destination)) System.out.println("Can not rename file with name " + source.getName());
    }

    public static boolean isExist(File file) {
        return file.exists();
    }
}

Вариант №2
package com.javarush.task.task31.task3101;

import java.io.*;
import java.nio.file.Path;
import java.util.*;

/*
Проход по дереву файлов
*/
public class Solution {
    public static void main(String[] args) throws IOException {
        File folder = new File(args[0]);
        File source = new File(args[1]);
        File destination = new File(source.getParent() + "/allFilesContent.txt");
        FileUtils.renameFile(source, destination);
        FileInputStream inputStream;
        Map<String, String> map = new TreeMap<>();
        Queue<File> queue = new PriorityQueue<>();
        Collections.addAll(queue, folder.listFiles());

        while (!queue.isEmpty()){
            File currentFile = queue.remove();
            if (currentFile.isDirectory()){
                Collections.addAll(queue, currentFile.listFiles());
            }else if(currentFile.length()<=50) {
                map.put(currentFile.getName(), currentFile.getAbsolutePath());
            }
        }


        FileOutputStream fileOutputStream = new FileOutputStream(destination, true);
        for (Map.Entry<String, String> value : map.entrySet()){
            inputStream = new FileInputStream(value.getValue());
            byte[] buff = new byte[inputStream.available()];
            int count = inputStream.read(buff);
            fileOutputStream.write(buff);
            fileOutputStream.write("\n".getBytes());
            inputStream.close();
        }
        fileOutputStream.close();
    }
}
